/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import userinterface.ManagerRole.*;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MarketCoEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.foods.Food;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ManageFoodOrderJPanel extends javax.swing.JPanel {

    private UserAccount userAccount;
    private MarketCoEnterprise marketEnterprise;
    private EcoSystem ecoSystem;
    private JPanel userProcessContainer;

    /**
     * Creates new form ManageOrganizationJPanel
     */
    public ManageFoodOrderJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.marketEnterprise = (MarketCoEnterprise) enterprise;
        this.ecoSystem = ecoSystem;

        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) productJTable.getModel();

        model.setRowCount(0);

        for (Food food : marketEnterprise.getFoodlist()) {
            Object[] row = new Object[3];
            row[0] = food;
            row[1] = food.getPrice();
            row[2] = food.getStock();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        selectBtn = new javax.swing.JButton();
        orderBtn = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        productJTable = new javax.swing.JTable();
        totalTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(111, 158, 159));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backJButton.setBackground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 520, -1, 50));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel3.setText("Product List");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Product");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, -1, -1));

        selectBtn.setBackground(new java.awt.Color(255, 255, 255));
        selectBtn.setText("Select");
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });
        add(selectBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 400, 98, 52));

        orderBtn.setBackground(new java.awt.Color(255, 255, 255));
        orderBtn.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        orderBtn.setText("Order");
        orderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderBtnActionPerformed(evt);
            }
        });
        add(orderBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 480, 130, 80));

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Num", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(orderJTable);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, 385, 220));

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Order");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 150, -1, -1));

        productJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Price", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(productJTable);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 364, 213));

        totalTextField.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        add(totalTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 410, 120, 30));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Total:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 410, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/超市.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed

        int selectedProd = productJTable.getSelectedRow();
        if (selectedProd < 0) {
            JOptionPane.showMessageDialog(null, "Please select a product from table", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Food food = (Food) productJTable.getValueAt(selectedProd, 0);

            //restaurant table
            DefaultTableModel dtmOrder = (DefaultTableModel) orderJTable.getModel();
            for (int i = 0; i < dtmOrder.getRowCount(); i++) {
                if (dtmOrder.getValueAt(i, 0).equals(food)) {
                    int num = Integer.parseInt(dtmOrder.getValueAt(i, 1).toString());
                    double price = Double.parseDouble(dtmOrder.getValueAt(i, 2).toString());
                    if (food.getStock() > num) {
                        num++;
                        dtmOrder.setValueAt(num, i, 1);
                        dtmOrder.setValueAt(num * food.getPrice(), i, 2);

                        //
                        updateTotalTextField();
                        return;
                    } else {
                        JOptionPane.showMessageDialog(null, "Product stock is not enough", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }
            }
            //add order
            Object[] row = new Object[dtmOrder.getColumnCount()];
            row[0] = food;
            row[1] = 1;
            row[2] = food.getPrice();
            dtmOrder.addRow(row);

            //
            updateTotalTextField();
            populateTable();

        }
    }//GEN-LAST:event_selectBtnActionPerformed
    private void updateTotalTextField() {
        double total = 0;
        DefaultTableModel dtmOrder = (DefaultTableModel) orderJTable.getModel();
        for (int i = 0; i < dtmOrder.getRowCount(); i++) {
            double price = Double.parseDouble(dtmOrder.getValueAt(i, 2).toString());
            total += price;
        }
       
        
        totalTextField.setText(String.format("%.2f", total));
    }

    private void orderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderBtnActionPerformed

        String message = userAccount.getUsername();

        DefaultTableModel dtmOrder = (DefaultTableModel) orderJTable.getModel();
        if (dtmOrder.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please order", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        for (int i = 0; i < dtmOrder.getRowCount(); i++) {
            message += " " + dtmOrder.getValueAt(i, 0).toString() + "*" + dtmOrder.getValueAt(i, 1).toString();
        }
        
        WorkRequest orderRequest = new WorkRequest();
        orderRequest.setMessage(message);
        orderRequest.setReceiver(marketEnterprise.getManagerUserAccount());
        orderRequest.setSender(userAccount);
        orderRequest.setStatus("waiting");

        for (Organization org : marketEnterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                orderRequest.setRequestDate(new Date());
                ua.getWorkQueue().getWorkRequestList().add(orderRequest);
            }
        }

        userAccount.getWorkQueue().getWorkRequestList().add(orderRequest);
        JOptionPane.showMessageDialog(null, "Product ordered!");
        dtmOrder.setRowCount(0);
        totalTextField.setText("");

        DB4OUtil.getInstance().storeSystem(ecoSystem);
        populateTable();
    }//GEN-LAST:event_orderBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton orderBtn;
    private javax.swing.JTable orderJTable;
    private javax.swing.JTable productJTable;
    private javax.swing.JButton selectBtn;
    private javax.swing.JTextField totalTextField;
    // End of variables declaration//GEN-END:variables
}
