/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PhysicalTherapyCoEnterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ManagePhysicalTherapistJPanel extends javax.swing.JPanel {

    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private JPanel userProcessContainer;
    
    /**
     * Creates new form ManageOrganizationJPanel
     */
    public ManagePhysicalTherapistJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        
        populateTable();
    }

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) ptJTable.getModel();
        
        model.setRowCount(0);
        
        for (Enterprise e : enterprise.getCoopEnterpriseDirectory().getEnterpriseList()) {
            System.out.println(e.getEnterpriseType());
            if (e.getEnterpriseType().toString().equals("PhysicalTherapy")) {
                PhysicalTherapyCoEnterprise pte = (PhysicalTherapyCoEnterprise) e;
                for (Organization organization : pte.getOrganizationDirectory().getOrganizationList()) {
                    System.out.println(organization);
                    for (UserAccount account : organization.getUserAccountDirectory().getUserAccountList()) {
                        System.out.println(account);
                        Object[] row = new Object[1];
                        row[0] = account;

                        model.addRow(row);
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ptJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        selectBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(111, 158, 159));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backJButton.setBackground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 488, -1, 56));

        ptJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ptJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ptJTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ptJTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 175, 310, 204));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel3.setText("Physical Therapist List");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 94, -1, -1));

        selectBtn.setBackground(new java.awt.Color(255, 255, 255));
        selectBtn.setText("Order");
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });
        add(selectBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 390, 98, 54));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void ptJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ptJTableMouseClicked

    }//GEN-LAST:event_ptJTableMouseClicked

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed
        int selectedPT = ptJTable.getSelectedRow();

        if (selectedPT < 0){
            JOptionPane.showMessageDialog(null, "Please select an Physical Therapist from table", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            UserAccount ua = (UserAccount)ptJTable.getValueAt(selectedPT, 0);
            WorkRequest workRequest = new WorkRequest();
            workRequest.setMessage("Book Physical Therapy");
            workRequest.setReceiver(ua);
            workRequest.setSender(userAccount);
            workRequest.setStatus("waiting");
            workRequest.setRequestDate(new Date());
            
            
            userAccount.getWorkQueue().getWorkRequestList().add(workRequest);
            ua.getWorkQueue().getWorkRequestList().add(workRequest);
            
                    JOptionPane.showMessageDialog(null, "Physical Therapy ordered!");
ptJTable.clearSelection();
            DB4OUtil.getInstance().storeSystem(ecoSystem);
        }
    }//GEN-LAST:event_selectBtnActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable ptJTable;
    private javax.swing.JButton selectBtn;
    // End of variables declaration//GEN-END:variables
}
